#!/usr/bin/python2
#-*- coding: utf-8 -*-

# pyeject - A frontend simple application for eject.
# Author: Marcin Kwapuliński <modywzm@gmail.com>

try:
    import gtk
    import pygtk
    pygtk.require('2.0')
    import sys
    import subprocess
    import os.path
    import os, ConfigParser
    import gettext
    import locale
except:
    print('ERROR : All required python dependencies were not found!')
    sys.exit()

VERSION = '0.1'
LOCALE_DOMAIN = 'pyeject'
LOCALE_DIR = os.path.join(sys.prefix, 'local', 'share', 'locale')
LICENCE_DIR = os.path.join(sys.prefix, 'share', 'doc', LOCALE_DOMAIN, 'COPYING')
CONFIGFILE = os.path.expanduser('~/.config/' + LOCALE_DOMAIN + '.conf')

class pyeject:
    
    defaults = {
        'device' : '/dev/cdrom',
        'default_icon' : '1',
        'icon_path' : ''
    }

    def closed_config(self, widget, data = None):
        self.config.destroy()
        
    def save_config(self, widget, data = None):
        self.save()
        self.config.destroy()    

    def popup_menu_cb(self, widget, button, time, data = None):
        if button == 3:
            if data:
                data.show_all()
                data.popup(None, None, None, 3, time)
        pass

    def config(self, widget, data = None):
        
        self.config = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.config.set_title(_('Preferences'))
        self.config.set_position(gtk.WIN_POS_CENTER)
        self.config.set_border_width(0)
        self.config.set_resizable(False)
       
        vbox = gtk.VBox(False, 0)
        vbox.set_border_width(0)
        
        hbox1 = gtk.HBox(False, 0)
        hbox1.set_border_width(2)
        vbox.pack_start(hbox1, True, True, 0)
        
        lab_device = gtk.Label(_('Device'))
        self.ety_device = gtk.Entry()
        self.ety_device.set_text(self.get('device'))        
        btn_device = gtk.Button(_('Default'))
        
        btn_device.connect('clicked', self.detect_device)
        
        hbox1.pack_start(lab_device, False, True, 2)
        hbox1.pack_start(self.ety_device, False, True, 2)
        hbox1.pack_end(btn_device, False, True, 2)
        
        hbox2 = gtk.HBox(False, 0)
        hbox2.set_border_width(2)
        self.btn_default_icon = gtk.CheckButton(_('Default icon'))
        
        if self.get('default_icon') == '1':
            self.btn_default_icon.set_active(True)
        else:
            self.btn_default_icon.set_active(False)
        
        hbox2.pack_start(self.btn_default_icon, True, True, 0)
        
        hbox3 = gtk.HBox(False, 0)
        hbox3.set_border_width(2)
        btn_select = gtk.Button(_('Select icon'))
        hbox3.pack_start(btn_select, True, True, 0)
        btn_select.connect('clicked', self.select_file)
        
        hbox4 = gtk.HBox(False, 0)
        hbox4.set_border_width(2)
        self.lab_icon_path = gtk.Label(self.get('icon_path'))
        hbox4.pack_start(self.lab_icon_path, True, True, 0)
        
        hbox = gtk.HBox(False, 0)
        hbox.set_border_width(2)
 
        btn_ok = gtk.Button(stock = gtk.STOCK_SAVE)
        btn_cancel = gtk.Button(stock = gtk.STOCK_CANCEL)
        
        btn_ok.connect('clicked', self.save_config)
        btn_cancel.connect('clicked', self.closed_config)
        
        hbox.pack_start(btn_ok, True, True, 0)
        hbox.pack_start(btn_cancel, True, True, 0)
        
        vbox.pack_start(hbox2, False, True, 0)
        vbox.pack_start(hbox3, False, True, 0)
        vbox.pack_start(hbox4, False, True, 0)
        vbox.pack_start(hbox, False, True, 0)

        self.config.add(vbox)
        self.config.show_all()
        
    def select_file(self, widget):
        fc = gtk.FileChooserDialog(title = _('Select icon'), parent = self.config, action = gtk.FILE_CHOOSER_ACTION_OPEN, buttons = (gtk.STOCK_OK,gtk.RESPONSE_ACCEPT, gtk.STOCK_CANCEL,gtk.RESPONSE_REJECT))
        filter_png = gtk.FileFilter()
        filter_png.set_name(_('Image PNG (*.png)'))
        filter_png.add_mime_type('image/png')
        fc.add_filter(filter_png)
        
        response = fc.run()
        
        if response == gtk.RESPONSE_ACCEPT:
            filename = fc.get_filename()
            self.lab_icon_path.set_text(filename)
            
        fc.destroy()

    def eject_event(self, widget):
        proc = subprocess.Popen('/usr/bin/eject ' + self.get('device') + ' -T', shell = True, stdout = subprocess.PIPE)
        proc.wait()

    def detect_device(self, widget):
        proc = subprocess.Popen('/usr/bin/eject -d', shell = True, stdout = subprocess.PIPE)
        eject_stdout = proc.communicate()[0].split('\n')[0]
        proc.wait()

        find_start = eject_stdout.find('/')
        find_end = eject_stdout.find('\'', find_start)
        
        device = str(eject_stdout[find_start:find_end])
        
        self.ety_device.set_text(device)
        
    def get(self, option):
        return self.parser.get('DEFAULT', option)    
    
    def set(self, option, value):
        self.parser.set('DEFAULT', option, value)
        
    def save(self, prefsFile = CONFIGFILE):
        self.set('device', str(self.ety_device.get_text()))
        default_icon_state = self.btn_default_icon.get_active()
        icon_path = self.lab_icon_path.get_text()
        
        if default_icon_state:
            self.set('default_icon', str('1'))
            self.statusIcon.set_from_icon_name('media-eject')
        else:
            self.set('default_icon', str('0'))
            
            if os.path.exists(icon_path):
                self.statusIcon.set_from_file(icon_path)
            else:
                self.statusIcon.set_from_icon_name('media-eject')
        
        if icon_path:
            self.set('icon_path', str(icon_path))
            
            if os.path.exists(icon_path) and not default_icon_state:
                self.statusIcon.set_from_file(icon_path)
            else:
                self.statusIcon.set_from_icon_name('media-eject')

        try:
            self.parser.write(open(prefsFile, 'w'))
        except StandardError:
            return
        
    def about(self, data = None):
        about = gtk.AboutDialog()
        about.set_program_name('pyeject')
        about.set_version(VERSION)
        about.set_copyright('© 2012 modywzm.pl')
        about.set_comments(_('A frontend simple application for eject.'))
        about.set_website('http://github.com/modywzm/pyeject')
        about.set_logo_icon_name('drive-optical')
        about.set_authors([
            'Marcin Kwapuliński <modywzm@gmail.com>',
        ])

        if os.path.exists(LICENCE_DIR):
            about.set_license(open(LICENCE_DIR).read())
            about.set_wrap_license(True)
        
        about.run()
        about.destroy()
        
    def __init__(self):
        (lang_code, encoding) = locale.getlocale() 
        gettext.bindtextdomain(LOCALE_DOMAIN, LOCALE_DIR)
        gettext.textdomain(LOCALE_DOMAIN)
        gettext.install(LOCALE_DOMAIN)
        
        self.parser = ConfigParser.SafeConfigParser(self.defaults)

        try:
            self.parser.read([CONFIGFILE,])
        except StandardError:
            return
		
        self.statusIcon = gtk.StatusIcon()

        menu = gtk.Menu()
        menuItem = gtk.ImageMenuItem(gtk.STOCK_PREFERENCES)
        menuItem.connect('activate', self.config)
        menu.append(menuItem)
        menuItem = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
        menuItem.connect('activate', self.about)
        menu.append(menuItem)
        separator = gtk.SeparatorMenuItem()
        menu.append(separator)
        menuItem = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        menuItem.connect('activate', gtk.main_quit, self.statusIcon)
        menu.append(menuItem)
        
        default_icon = self.get('default_icon')
        icon_path = self.get('icon_path')
        
        if default_icon == '1':
            self.statusIcon.set_from_icon_name('media-eject')
        elif os.path.exists(icon_path):
            self.statusIcon.set_from_file(icon_path)
        else:
            self.statusIcon.set_from_icon_name('media-eject')
        
        self.statusIcon.set_tooltip(_('Eject tray device'))
        self.statusIcon.connect('activate', self.eject_event)
        self.statusIcon.connect('popup-menu', self.popup_menu_cb, menu)
        self.statusIcon.set_visible(True)

if __name__ == '__main__':
    try:
        pyeject()
        gtk.main()
    except KeyboardInterrupt:
        pass
