#!/usr/bin/python2
#-*- coding: utf-8 -*-
# pyeject - A frontend simple application for eject.
# Author: Marcin Kwapuliński <modywzm@gmail.com>

try:
    import gtk
    import pygtk
    pygtk.require('2.0')
    import sys
    import subprocess
    import os.path
    import os, ConfigParser
    import gettext
    import locale
except:
    print('ERROR : All required python dependencies were not found!')
    sys.exit()

VERSION = '0.2'
LOCALE_DOMAIN = 'pyeject'
LOCALE_DIR = os.path.join(sys.prefix, 'local', 'share', 'locale')
LICENCE_DIR = os.path.join(sys.prefix, 'share', 'doc', LOCALE_DOMAIN, 'COPYING')
CONFIG_FILE = os.path.expanduser('~/.config/' + LOCALE_DOMAIN + '.conf')

class pyeject:
    
    defaults = {
        'device' : '/dev/cdrom',
        'default_icon' : '1',
        'icon_path' : ''
    }
    
    def popup_menu_cb(self, widget, button, time, data = None):
        if button == 3:
            if data:
                data.show_all()
                data.popup(None, None, None, 3, time)
        pass
        
    def config(self, widget, data = None):
        config = gtk.Dialog(_('Preferences'), None, 0, (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OK, gtk.RESPONSE_OK))
        config.set_position(gtk.WIN_POS_CENTER)
        config.set_border_width(2)
        config.set_resizable(False)

        table = gtk.Table(2, 3, False)
        table.set_border_width(5)
        table.set_row_spacings(5)
        table.set_col_spacings(10)
        
        lab_device = gtk.Label(_('Device'))
        lab_device.set_alignment(0.0, 0.5)
        self.ety_device = gtk.Entry()
        self.ety_device.set_text(self.get('device'))        
        btn_device = gtk.Button(_('Default'))
        btn_device.connect('clicked', self.detect_device)
        
        table.attach(lab_device, 0, 1, 0, 1)
        table.attach(self.ety_device, 1, 2, 0, 1)
        table.attach(btn_device, 2, 3, 0, 1)
        
        lab_icon = gtk.Label(_('Icon'))
        lab_icon.set_alignment(0.0, 0.5)
        btn_select = gtk.Button(_('Select'))
        self.ety_icon_path = gtk.Entry()
        self.ety_icon_path.set_text(self.get('icon_path'))
        btn_select.connect('clicked', self.select_file)
        
        table.attach(lab_icon, 0, 1, 1, 2)
        table.attach(self.ety_icon_path, 1, 2, 1, 2)
        table.attach(btn_select, 2, 3, 1, 2)
        
        self.btn_default_icon = gtk.CheckButton(_('Default icon'))
        
        if self.get('default_icon') == '1':
            self.btn_default_icon.set_active(True)
        else:
            self.btn_default_icon.set_active(False)
        
        config.vbox.pack_start(table, False, True, 2)
        config.vbox.pack_start(self.btn_default_icon, False, True, 2)
        config.show_all()
        
        response =  config.run()
        
        if response == gtk.RESPONSE_OK:
            self.save()
        
        config.destroy()
        
    def select_file(self, widget):
        fc = gtk.FileChooserDialog(_('Select icon'), None, gtk.FILE_CHOOSER_ACTION_OPEN, (gtk.STOCK_OK, gtk.RESPONSE_ACCEPT, gtk.STOCK_CANCEL, gtk.RESPONSE_REJECT))
        filter_png = gtk.FileFilter()
        filter_png.set_name(_('Image PNG (*.png)'))
        filter_png.add_mime_type('image/png')
        fc.add_filter(filter_png)
        
        response = fc.run()
        
        if response == gtk.RESPONSE_ACCEPT:
            filename = fc.get_filename()
            self.ety_icon_path.set_text(filename)
            
        fc.destroy()
        
    def eject_event(self, widget):
        proc = subprocess.Popen('/usr/bin/eject ' + self.get('device') + ' -T', shell = True, stdout = subprocess.PIPE)
        proc.wait()
        
    def detect_device(self, widget):
        proc = subprocess.Popen('/usr/bin/eject -d', shell = True, stdout = subprocess.PIPE)
        eject_stdout = proc.communicate()[0].split('\n')[0]
        proc.wait()

        find_start = eject_stdout.find('/')
        find_end = eject_stdout.find('\'', find_start)
        
        device = str(eject_stdout[find_start:find_end])
        
        self.ety_device.set_text(device)
        
    def get(self, option):
        return self.parser.get('DEFAULT', option)    
    
    def set(self, option, value):
        self.parser.set('DEFAULT', option, value)
        
    def save(self, config_file = CONFIG_FILE):
        self.set('device', str(self.ety_device.get_text()))
        default_icon_state = self.btn_default_icon.get_active()
        icon_path = self.ety_icon_path.get_text()
        
        if default_icon_state:
            self.set('default_icon', str('1'))
            self.status_icon.set_from_icon_name('media-eject')
        else:
            self.set('default_icon', str('0'))
            
            if os.path.exists(icon_path):
                self.status_icon.set_from_file(icon_path)
            else:
                self.status_icon.set_from_icon_name('media-eject')
        
        if icon_path:
            self.set('icon_path', str(icon_path))
            
            if os.path.exists(icon_path) and not default_icon_state:
                self.status_icon.set_from_file(icon_path)
            else:
                self.status_icon.set_from_icon_name('media-eject')
        
        try:
            self.parser.write(open(config_file, 'w'))
        except StandardError:
            return
        
    def about(self, data = None):
        about = gtk.AboutDialog()
        about.set_program_name('pyeject')
        about.set_version(VERSION)
        about.set_copyright('© 2012 modywzm.pl')
        about.set_comments(_('A frontend simple application for eject.'))
        about.set_website('http://github.com/modywzm/pyeject')
        about.set_logo_icon_name('drive-optical')
        about.set_authors([
            'Marcin Kwapuliński <modywzm@gmail.com>',
        ])
        
        if os.path.exists(LICENCE_DIR):
            about.set_license(open(LICENCE_DIR).read())
            about.set_wrap_license(True)
        
        about.run()
        about.destroy()
        
    def __init__(self):
        (lang_code, encoding) = locale.getlocale() 
        gettext.bindtextdomain(LOCALE_DOMAIN, LOCALE_DIR)
        gettext.textdomain(LOCALE_DOMAIN)
        gettext.install(LOCALE_DOMAIN)
        
        self.parser = ConfigParser.SafeConfigParser(self.defaults)
        
        try:
            self.parser.read(CONFIG_FILE)
        except StandardError:
            return
        
        self.status_icon = gtk.StatusIcon()

        menu = gtk.Menu()
        menu_item = gtk.ImageMenuItem(gtk.STOCK_PREFERENCES)
        menu_item.connect('activate', self.config)
        menu.append(menu_item)
        menu_item = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
        menu_item.connect('activate', self.about)
        menu.append(menu_item)
        separator = gtk.SeparatorMenuItem()
        menu.append(separator)
        menu_item = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        menu_item.connect('activate', gtk.main_quit, self.status_icon)
        menu.append(menu_item)
        
        default_icon = self.get('default_icon')
        icon_path = self.get('icon_path')
        
        if default_icon == '1':
            self.status_icon.set_from_icon_name('media-eject')
        elif os.path.exists(icon_path):
            self.status_icon.set_from_file(icon_path)
        else:
            self.status_icon.set_from_icon_name('media-eject')
        
        self.status_icon.set_tooltip(_('Eject tray device'))
        self.status_icon.connect('activate', self.eject_event)
        self.status_icon.connect('popup-menu', self.popup_menu_cb, menu)
        self.status_icon.set_visible(True)
        
if __name__ == '__main__':
    try:
        pyeject()
        gtk.main()
    except KeyboardInterrupt:
        pass
